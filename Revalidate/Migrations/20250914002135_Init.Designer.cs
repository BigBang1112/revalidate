// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Revalidate;

#nullable disable

namespace Revalidate.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250914002135_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Revalidate.Entities.FileEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("mediumblob");

                    b.Property<string>("Etag")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Revalidate.Entities.GhostCheckpointEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("GhostId")
                        .HasColumnType("char(36)");

                    b.Property<float?>("Speed")
                        .HasColumnType("float");

                    b.Property<int?>("StuntsScore")
                        .HasColumnType("int");

                    b.Property<int?>("Time")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GhostId");

                    b.ToTable("GhostCheckpoints");
                });

            modelBuilder.Entity("Revalidate.Entities.GhostInputEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("varchar(24)");

                    b.Property<bool?>("Pressed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<Guid>("ValidationResultId")
                        .HasColumnType("char(36)");

                    b.Property<int?>("Value")
                        .HasColumnType("int");

                    b.Property<float?>("ValueF")
                        .HasColumnType("float");

                    b.Property<ushort?>("X")
                        .HasColumnType("smallint unsigned");

                    b.Property<ushort?>("Y")
                        .HasColumnType("smallint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("ValidationResultId");

                    b.ToTable("GhostInputs");
                });

            modelBuilder.Entity("Revalidate.Entities.ValidationRequestEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset?>("CompletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Warnings")
                        .IsRequired()
                        .HasColumnType("JSON");

                    b.HasKey("Id");

                    b.ToTable("ValidationRequests");
                });

            modelBuilder.Entity("Revalidate.Entities.ValidationResultEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset?>("CompletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CpuKind")
                        .HasColumnType("int");

                    b.Property<int>("EventsDuration")
                        .HasColumnType("int");

                    b.Property<uint>("ExeChecksum")
                        .HasColumnType("int unsigned");

                    b.Property<string>("ExeVersion")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FileName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<Guid?>("GhostId")
                        .HasColumnType("char(36)");

                    b.Property<string>("GhostUid")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsGhostExtracted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsValid")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("OsKind")
                        .HasColumnType("int");

                    b.Property<string>("Problems")
                        .IsRequired()
                        .HasColumnType("JSON");

                    b.Property<string>("RaceSettings")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("RaceTime")
                        .HasColumnType("int");

                    b.Property<Guid?>("ReplayId")
                        .HasColumnType("char(36)");

                    b.Property<byte[]>("Sha256")
                        .IsRequired()
                        .HasColumnType("BINARY(32)");

                    b.Property<DateTimeOffset?>("StartedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("SteeringWheelSensitivity")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte[]>("TitleChecksum")
                        .HasColumnType("BINARY(32)");

                    b.Property<string>("TitleId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("ValidationSeed")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("WalltimeEndedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("WalltimeStartedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("GhostId");

                    b.HasIndex("ReplayId");

                    b.HasIndex("Sha256");

                    b.ToTable("ValidationResults");
                });

            modelBuilder.Entity("ValidationRequestEntityValidationResultEntity", b =>
                {
                    b.Property<Guid>("RequestsId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ResultsId")
                        .HasColumnType("char(36)");

                    b.HasKey("RequestsId", "ResultsId");

                    b.HasIndex("ResultsId");

                    b.ToTable("ValidationRequestEntityValidationResultEntity");
                });

            modelBuilder.Entity("Revalidate.Entities.GhostCheckpointEntity", b =>
                {
                    b.HasOne("Revalidate.Entities.ValidationResultEntity", "Ghost")
                        .WithMany("Checkpoints")
                        .HasForeignKey("GhostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ghost");
                });

            modelBuilder.Entity("Revalidate.Entities.GhostInputEntity", b =>
                {
                    b.HasOne("Revalidate.Entities.ValidationResultEntity", "ValidationResult")
                        .WithMany("Inputs")
                        .HasForeignKey("ValidationResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ValidationResult");
                });

            modelBuilder.Entity("Revalidate.Entities.ValidationResultEntity", b =>
                {
                    b.HasOne("Revalidate.Entities.FileEntity", "Ghost")
                        .WithMany()
                        .HasForeignKey("GhostId");

                    b.HasOne("Revalidate.Entities.FileEntity", "Replay")
                        .WithMany()
                        .HasForeignKey("ReplayId");

                    b.Navigation("Ghost");

                    b.Navigation("Replay");
                });

            modelBuilder.Entity("ValidationRequestEntityValidationResultEntity", b =>
                {
                    b.HasOne("Revalidate.Entities.ValidationRequestEntity", null)
                        .WithMany()
                        .HasForeignKey("RequestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Revalidate.Entities.ValidationResultEntity", null)
                        .WithMany()
                        .HasForeignKey("ResultsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Revalidate.Entities.ValidationResultEntity", b =>
                {
                    b.Navigation("Checkpoints");

                    b.Navigation("Inputs");
                });
#pragma warning restore 612, 618
        }
    }
}
